using Hqub.MusicBrainz.Entities;
using System.Collections;
using System.Collections.Generic;

namespace Hqub.MusicBrainz
{
    /// <summary>
    /// Query result representing collections of MusicBrainz entities returned by search or browse requests.
    /// </summary>
    /// <typeparam name="T">Any supported MusicBrainz entity implementing the <see cref="IEntity"/> interface.</typeparam>
    public sealed class QueryResult<T> : IEnumerable<T> where T : IEntity
    {
        /// <summary>
        /// Gets the total number of items available.
        /// </summary>
        /// <remarks>
        /// This might be different from the count of <see cref="QueryResult{T}.Items"/>. If the
        /// list was generated by a request that requires paging, this property will return the
        /// total number of matching items in the database, while the number of returned items
        /// is limited by the requests <c>limit</c> parameter.
        /// </remarks>
        public int Count { get; }

        /// <summary>
        /// Gets the list offset used for paging.
        /// </summary>
        public int Offset { get; }

        /// <summary>
        /// Gets the list of entities.
        /// </summary>
        public IReadOnlyList<T> Items { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryResult{T}"/> class.
        /// </summary>
        public QueryResult(int count, int offset, List<T> list)
        {
            Count = count;
            Offset = offset;
            Items = list;
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        public IEnumerator<T> GetEnumerator()
        {
            return Items.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
